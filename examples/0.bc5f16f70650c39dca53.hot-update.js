webpackHotUpdate(0,{

/***/ "../src/format-utils/format-utils.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _moment = __webpack_require__(\"../node_modules/moment/moment.js\");\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _formatUtils = __webpack_require__(\"../src/format-utils/format-utils.constants.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FormatUtils = function FormatUtils() {\n  var _this = this;\n\n  _classCallCheck(this, FormatUtils);\n\n  this.getCurrencyDecimals = function (currency) {\n    var numberOptions = {\n      currency: currency,\n      style: 'currency',\n      currencyDisplay: 'code',\n      useGrouping: false\n    };\n    var test = new Intl.NumberFormat('en-GB', numberOptions).format(1.111111).replace(/[^\\d.,]/g, '');\n    var foundSeparator = test.search(/[.,]/g);\n    if (foundSeparator === -1) {\n      return 0;\n    }\n    return test.length - foundSeparator - 1;\n  };\n\n  this.getFXRateDecimals = function (value) {\n    var valueString = String(parseFloat(String(value)));\n    var decimalSeparator = valueString.indexOf('.');\n    var decimalNumber = valueString.length - decimalSeparator - 1;\n    return decimalSeparator === -1 || decimalNumber <= _formatUtils.FXRATE_DECIMALS ? _formatUtils.FXRATE_DECIMALS : decimalNumber;\n  };\n\n  this.getLocalDateTime = function (timestamp) {\n    var isoTimestamp = timestamp !== null && timestamp.slice(-1) !== 'Z' ? timestamp + 'Z' : timestamp;\n    var localTime = new Date(isoTimestamp) - new Date(timestamp).getTimezoneOffset();\n    var timeToConvert = localTime >= 0 ? localTime : 0;\n    return new Date(timeToConvert);\n  };\n\n  this.formatCurrencyAmount = function (value, currency) {\n    return Number(value).toFixed(_this.getCurrencyDecimals(currency));\n  };\n\n  this.formatFXRate = function (value) {\n    return Number(value).toFixed(_this.getFXRateDecimals(value));\n  };\n\n  this.formatFloatToFixedDecimals = function (value, decimals) {\n    /* eslint-disable no-restricted-globals */\n    var floatValue = String(value).replace(/[^\\d.,-]/g, '').replace(',', '.');\n    floatValue = isNaN(Number(floatValue)) ? 0 : Number(floatValue);\n    return floatValue.toFixed(decimals);\n  };\n\n  this.formatDate = function (value, dateFormat) {\n    if (value === null) {\n      return '';\n    }\n    if (_moment2.default.utc(value, _formatUtils.SKIPPED_DATE_FORMAT, true).isValid()) {\n      return value;\n    }\n    if (_moment2.default.utc(value, _moment2.default.ISO_8601, true).isValid()) {\n      return _moment2.default.utc(value, _moment2.default.ISO_8601, true).format(dateFormat);\n    }\n    return value;\n  };\n\n  this.formatDateToISO = function (value) {\n    var dateFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var isStrict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var defaultValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    var defaultDateFormat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n    if (isStrict && _moment2.default.utc(value, _formatUtils.SKIPPED_DATE_FORMAT, isStrict).isValid()) {\n      return value;\n    }\n    if (_moment2.default.utc(value, _moment2.default.ISO_8601, isStrict).isValid()) {\n      return _moment2.default.utc(value, _moment2.default.ISO_8601, isStrict).toISOString();\n    }\n    if (dateFormat !== null && _moment2.default.utc(value, dateFormat, isStrict).isValid()) {\n      return _moment2.default.utc(value, dateFormat, isStrict).toISOString();\n    }\n    if (defaultDateFormat !== null && _moment2.default.utc(value, defaultDateFormat, isStrict).isValid()) {\n      return _moment2.default.utc(value, defaultDateFormat, isStrict).toISOString();\n    }\n    return defaultValue;\n  };\n\n  this.parseDate = function (value, dateFormat) {\n    var newFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (_moment2.default.utc(value, dateFormat).isValid()) {\n      return newFormat === null ? _moment2.default.utc(value, dateFormat).toISOString() : _moment2.default.utc(value, dateFormat).format(newFormat);\n    } else if (_moment2.default.utc(value, _moment2.default.ISO_8601).isValid()) {\n      return newFormat === null ? _moment2.default.utc(value, _moment2.default.ISO_8601).toISOString() : _moment2.default.utc(value, _moment2.default.ISO_8601).format(newFormat);\n    }\n    return null;\n  };\n\n  this.parseFloat = function (value, decimalSeparator) {\n    if (!value || String(value).length === 0) {\n      return value;\n    }\n    return String(value).replace(decimalSeparator, '.');\n  };\n\n  this.parseNumber = function (value) {\n    return String(value).replace(/[^\\d-]/g, '') || '';\n  };\n}\n/**\n * Get a number of decimal digits for a currency.\n * Input: currency code :: string.\n * Output: decimals :: number.\n * Example of input: 'EUR'. Example of output: 2.\n * Example of input: 'JPY'. Example of output: 0.\n */\n\n\n/**\n * Get a number of decimal digits for a FX rate.\n * Input: rate :: [number, string].\n * Output: decimals :: number.\n * Example of input: 1.11. Example of output: 6.\n * Example of input: 1.12345678. Example of output: 8.\n */\n\n\n/**\n * Get local date and time from ISO 8601 timestamp. It's cross-browser (IE especially!).\n  * Input: UTC timestamp :: string.\n  * Output: timestamp :: date.\n  */\n\n\n/**\n * Format amount according to its currency.\n * Input: amount :: [number, string], currency code :: string.\n * Output: amount :: string.\n * Example of input: 1, 'EUR'. Example of output: '1.00'.\n * Example of input: 1.123, 'JPY'. Example of output: '1'.\n */\n\n\n/**\n * Format FX rate.\n * Input: rate.\n * Output: rate :: string.\n * Example of input: 1.11. Example of output: '1.110000'.\n * Example of input: 1.12345678. Example of output: '1.12345678'.\n */\n\n\n/**\n * Format an input to a float with fixed number of decimals.\n * Input: value to format :: [number, string], decimals :: number.\n * Output: formatted value :: string.\n * Example of input: '23 000.1abc', '2'. Example of output: '23000.10'.\n */\n\n\n/**\n * Format date to a chosen format.\n * Input: date :: string, date format :: string.\n * Output: date :: string.\n * Example of input: '2017-01-01T00:00:00.000Z', 'DD.MM.YYYY'. Example of output: '01.01.2017'.\n */\n\n\n/**\n * Format localized date string to ISO timestamp.\n * Input: date :: string, date format :: string (optional), sign of strict date format ::\n * boolean (optional), default value :: string (optional), default date format ::\n * string (optional).\n * Output: ISO timestamp :: string.\n * Example of input: '01.01', 'DD.MM.YYYY'. Example of output: '2017-01-01T00:00:00.000Z'.\n */\n\n\n/**\n * Parse date string to ISO string or a new format.\n * Input: date :: string, date format :: string, new date format :: string (optional).\n * Output: date :: string.\n * Example of input: '01.01.2017', 'DD.MM.YYYY'. Example of output: '2017-01-01T00:00:00.000Z'.\n * Example of input: '01.01.2017', 'DD.MM.YYYY', 'YYYY-MM-DD'. Example of output: '2017-01-01'.\n */\n\n\n/**\n * Parse float.\n * Input: value :: [number, string], decimal separator :: string.\n * Output: value :: string.\n * Example of input: '1,1', ','. Example of output: '1.1'.\n */\n\n\n/**\n * Parse number.\n * Input: value :: [number, string].\n * Output: value :: string.\n * Example of input: '1ab'. Example of output: '1'.\n */\n;\n\nexports.default = new FormatUtils();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/format-utils/format-utils.js\n");

/***/ })

})